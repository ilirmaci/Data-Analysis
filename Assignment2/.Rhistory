table(predict(mnl60, newdata=s60.val), s$activity[s$set=='validation']) -> v60
sum(diag(v60))/sum(v60) ## validation set error
table(predict(mnl100), s100$activity) -> t100
sum(diag(t100))/sum(t100) ## training set error
s100.val <- as.data.frame(scale(s[s$set=='validation', -(562:564)])
%*% svd.training$v[, 1:100])
table(predict(mnl100, newdata=s100.val), s$activity[s$set=='validation']) -> v100
sum(diag(v100))/sum(v100) ## validation set error
v60
v100
rm(s100.val)
rm(s60.val)
# get prediction error rates on training and validation data
names(s)
mnl <- multinom(activity~., data=s[s$set=='training', -c(562,564)])
?nnet
nn60 <- nnet(activity~., data=s60, size=20)
rm(s100.val)
nn60 <- nnet(activity~., data=s60, size=10)
nn60 <- nnet(activity~., data=s60, size=10, maxit=1000)
nn60 <- nnet(activity~., data=s60, size=10, maxit=2000)
object.size(nn60)
object.size(nn60)/1000
object.size(mnl60)/1000
s60.val <- as.data.frame(scale(s[s$set=='validation', -(562:564)])
%*% svd.training$v[, 1:60])
object.size(s60)/1000
object.size(s60.val)/1000
activity.hat <- predict(nn60, newdata=s60.val, type='class')
head(predict(nn60))
head(predict(nn60, type=class))
head(predict(nn60, type='class'))
table(activity.hat, s$activity[s$set=='validation'])
table(activity.hat, s$activity[s$set=='validation']) -> v60
sum(diag(v60))/sum(v60) ## validation set error
nn60 <- nnet(activity~., data=s60, size=10, maxit=2000, decay=0.003)
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60
v60
sum(diag(v60))/sum(v60) ## validation set error
nn60 <- nnet(activity~., data=s60, size=10, maxit=2500, decay=0.01)
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60
sum(diag(v60))/sum(v60) ## validation set error
nn60 <- nnet(activity~., data=s60, size=10, maxit=2500, decay=0.03)
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60
sum(diag(v60))/sum(v60) ## validation set error
nn60 <- nnet(activity~., data=s60, size=10, maxit=2500, decay=0.09)
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60
sum(diag(v60))/sum(v60) ## validation set error
s100.val <- as.data.frame(scale(s[s$set=='validation', -(562:564)])
%*% svd.training$v[, 1:100])
mnl60 <- multinom(activity ~ ., data=s60, maxit=1000)
mnl100 <- multinom(activity ~ ., data=s100, maxit=1000)
l
table(predict(mnl60, newdata=s60.val), s$activity[s$set=='validation']) -> v60
sum(diag(v60))/sum(v60) ## validation set error
table(predict(mnl100, newdata=s100.val), s$activity[s$set=='validation']) -> v100
sum(diag(v100))/sum(v100) ## validation set error
nn60 <- nnet(activity~., data=s60, size=10, maxit=2500, decay=0.03)
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60.nn
sum(diag(v60))/sum(v60) ## validation set error
sum(diag(v60.nn))/sum(v60.nn) ## validation set error
nn100 <- nnet(activity~., data=s100, size=10, maxit=2500, decay=0.01)
nn100 <- nnet(activity~., data=s100, size=8, maxit=2500, decay=0.01)
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
nn100 <- nnet(activity~., data=s100, size=8, maxit=2500, decay=0.03)
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
nn60 <- nnet(activity~., data=s60, size=15, maxit=2500, decay=0.03)
nn60 <- nnet(activity~., data=s60, size=14, maxit=2500, decay=0.03)
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60.nn
sum(diag(v60.nn))/sum(v60.nn) ## validation set error
sum(diag(v60))/sum(v60) ## validation set error
61*15
61*15 + 15*(7)
61*15 + 15*6
61*15 + 15*5
61*14 + 15*7
61*14 + 15*6
101*7 + 7*6
101*8 + 9*6
101*9 + 10*6
nn100 <- nnet(activity~., data=s100, size=9, maxit=2500, decay=0.03)
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=0.03, MaxNWts=2000)
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=0.1, MaxNWts=2000)
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=0.2, MaxNWts=2000)
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=0.3, MaxNWts=2000)
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(t100.nn))/sum(t100.nn) ## validation set error
sum(diag(v100.nn))/sum(v100.nn) ## validation set error
??train
?train
61*14 + 15*6
61*20 + 21*6
str(nn60)
lambda <- c(0.01, 0.03, 0.1, 0.3, 0.5, 1, 1.5, 3)
p60 <- data.frame(lambda=lambda, training=NA, validation=NA)
for(i in seq_along(lambda)){
nn60 <- nnet(activity~., data=s60, size=14, maxit=2500, decay=lambda[i])
activity.hat <- predict(nn60, type='class')
table(activity.hat, s60$activity) -> t60.nn
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60.nn
# training set precision
p60$training[i] <- sum(diag(t60.nn))/sum(t60.nn)
# validation set precision
p60$validation[i] <- sum(diag(v60.nn))/sum(v60.nn)
}
plot(p60$training, type='l')
plot(p60$lambda, p60$training, type='l')
lines(p60$lambda, p60$validation)
p60
plot(p60$lambda, p60$training, type='l', yrange=c(0.9, 1))
?plot
plot(p60$lambda, p60$training, type='l', ylim=c(0.9, 1))
lines(p60$lambda, p60$validation)
p60$lambda[which.max(p60$validation)]
plot(p60$lambda, p60$training, type='l', yrange=c(0.7, 1))
plot(p60$lambda, p60$training, type='l', ylim=c(0.7, 1))
warnings()
plot(p60$lambda, p60$training, type='l', ylim=c(0.7, 1))
lines(p60$lambda, p60$validation, col='red')
lines(p60$lambda, p60$validation, col='red', lwd=2)
nn60 <- nnet(activity~., data=s60, size=14, maxit=2500, decay=5)
activity.hat <- predict(nn60, type='class')
table(activity.hat, s60$activity) -> t60.nn
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60.nn
sum(diag(t60.nn))/sum(t60.nn)
sum(diag(v60.nn))/sum(v60.nn)
p601 <- rbind(p60, c(5, 0.9739309, 0.9002677))
plot(p60$lambda, p60$training, type='l', yrange=c(0.9, 1))
lines(p60$lambda, p60$validation)
# lambda that gives best fit
p60$lambda[which.max(p60$validation)]
plot(p60$lambda, p60$training, type='l', ylim=c(0.7, 1))
lines(p60$lambda, p60$validation, col='red', lwd=2)
# lambda that gives best fit
p60$lambda[which.max(p60$validation)]
nn60 <- nnet(activity~., data=s60, size=14, maxit=2500, decay=10)
activity.hat <- predict(nn60, type='class')
table(activity.hat, s60$activity) -> t60.nn
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60.nn
sum(diag(t60.nn))/sum(t60.nn)
sum(diag(v60.nn))/sum(v60.nn)
p601 <- rbind(p60, c(10, 0.9618111, 0.894913))
plot(p60$lambda, p60$training, type='l', ylim=c(0.7, 1))
lines(p60$lambda, p60$validation, col='red', lwd=2)
# lambda that gives best fit
p60$lambda[which.max(p60$validation)]
p601
p60 <- p601
plot(p60$lambda, p60$training, type='l', ylim=c(0.7, 1))
lines(p60$lambda, p60$validation, col='red', lwd=2)
# lambda that gives best fit
p60$lambda[which.max(p60$validation)]
p100 <- data.frame(lambda=lambda, training=NA, validation=NA)
for(i in seq_along(lambda)){
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=lambda[i])
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
# training set precision
p100$training[i] <- sum(diag(t100.nn))/sum(t100.nn)
# validation set precision
p100$validation[i] <- sum(diag(v100.nn))/sum(v100.nn)
}
for(i in seq_along(lambda)){
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500,
decay=lambda[i], MaxNWts=2000)
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
# training set precision
p100$training[i] <- sum(diag(t100.nn))/sum(t100.nn)
# validation set precision
p100$validation[i] <- sum(diag(v100.nn))/sum(v100.nn)
}
plot(p100$lambda, p100$training, type='l', ylim=c(0.7, 1))
lines(p100$lambda, p100$validation, col='red', lwd=2)
# lambda that gives best fit
p100$lambda[which.max(p100$validation)]
lambda <- c(0.01, 0.03, 0.1, 0.3, 0.5, 1, 1.5, 3, 5, 10)
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500,
decay=5, MaxNWts=2000)
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(t100.nn))/sum(t100.nn)
sum(diag(v100.nn))/sum(v100.nn)
p100 <- rbind(p100, c(5, 0.9865081, 0.9270415))
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500,
decay=10, MaxNWts=2000)
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
sum(diag(t100.nn))/sum(t100.nn)
sum(diag(v100.nn))/sum(v100.nn)
p100 <- rbind(p100, c(10, 0.9764464, 0.9230254))
plot(p100$lambda, p100$training, type='l', ylim=c(0.7, 1))
lines(p100$lambda, p100$validation, col='red', lwd=2)
# lambda that gives best fit
p100$lambda[which.max(p100$validation)]
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1))
lines(p100$lambda, p100$validation, col='red', lwd=2)
# lambda that gives best fit
table(s$subject)
names(s)
table(s$activity)
max(p100$validation)
562*6
table(s$set)
table(s$set, s$subject)
table(predict(mnl60), s60$activity) -> t60
t60
table(predict(mnl60, newdata=s60.val), s$activity[s$set=='validation']) -> v60
v60
sum(diag(t60))/sum(t60) ## training set error
sum(diag(v60))/sum(v60) ## validation set error
table(predict(mnl100), s100$activity) -> t100
sum(diag(t100))/sum(t100) ## training set error
table(predict(mnl100, newdata=s100.val), s$activity[s$set=='validation']) -> v100
sum(diag(v100))/sum(v100) ## validation set error
t100
table(predict(mnl100, newdata=s100.val), s$activity[s$set=='validation'])
?nnet
p100
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1))
lines(p100$lambda, p100$validation, col='red', lwd=2)
# lambda that gives best fit
p100$lambda[which.max(p100$validation)]
p60
par(mfrow=c(1, 2))
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1))
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1))
lines(p100$lambda, p100$validation, col='red', lwd=2)
par(mfrow=c(1, 1))
par(mfrow=c(1, 2))
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p100$lambda, p100$validation, col='red', lwd=2)
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.7)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p100$lambda, p100$validation, col='red', lwd=2)
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p100$lambda, p100$validation, col='red', lwd=2)
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)')
lines(p100$lambda, p100$validation, col='red', lwd=2)
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend(legend=c('Training', 'Validation'))
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend(bottomright, legend=c('Training', 'Validation'))
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'))
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=(1,2))
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.8)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
par(mfrow=c(1, 2), cex=0.9)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
?png
png(file='A2_plot.png')
par(mfrow=c(1, 2), cex=0.9)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.b: 100-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
dev.off()
png(file='A2_plot.png', width=960)
par(mfrow=c(1, 2), cex=0.9)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.b: 100-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
dev.off()
png(file='A2_plot.png', width=960)
par(mfrow=c(1, 2))
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.b: 100-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
dev.off()
png(file='A2_plot.png', width=960)
par(mfrow=c(1, 2), cex=1)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.b: 100-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
dev.off()
png(file='A2_plot.png', width=800, height=400)
par(mfrow=c(1, 2), cex=1)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions/total predictions)',
main='Figure 1.b: 100-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
dev.off()
png(file='A2_plot.png', width=800, height=400)
par(mfrow=c(1, 2), cex=1)
plot(p60$lambda, p60$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions / total predictions)',
main='Figure 1.a: 60-column data')
lines(p60$lambda, p60$validation, col='red', lwd=2)
plot(p100$lambda, p100$training, type='l', ylim=c(0.85, 1),
xlab='Weight decay (regularization)',
ylab='Success rate (correct predictions / total predictions)',
main='Figure 1.b: 100-column data')
lines(p100$lambda, p100$validation, col='red', lwd=2)
legend('bottomright', legend=c('Training', 'Validation'), lwd=c(1,2), col=c(1,2))
par(mfrow=c(1, 1))
dev.off()
p60
p100
nn60 <- nnet(activity~., data=s60, size=14, maxit=2500, decay=0.3)
activity.hat <- predict(nn60, type='class')
table(activity.hat, s60$activity) -> t60.nn
activity.hat <- predict(nn60, newdata=s60.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v60.nn
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=0.3)
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
nn100 <- nnet(activity~., data=s100, size=14, maxit=2500, decay=0.3, MaxNWts=2000)
activity.hat <- predict(nn100, type='class')
table(activity.hat, s100$activity) -> t100.nn
activity.hat <- predict(nn100, newdata=s100.val, type='class')
table(activity.hat, s$activity[s$set=='validation']) -> v100.nn
p60$validation[i] <- sum(diag(v60.nn))/sum(v60.nn)
sum(diag(v60.nn))/sum(v60.nn)
sum(diag(v100.nn))/sum(v100.nn)
v60
v60.nn
v100.nn
sum(diag(t100))/sum(t100) ## training set error
sum(diag(v100))/sum(v100) ## validation set error
s60.test <- as.data.frame(scale(s[s$set=='test', -(562:564)])
%*% svd.training$v[, 1:60])
s100.test <- as.data.frame(scale(s[s$set=='test', -(562:564)])
%*% svd.training$v[, 1:100])
table(predict(mnl100, newdata=s100.test), s$activity[s$set=='test']) -> test100
sum(diag(test100))/sum(test100) ## validation set error
test100
activity.hat <- predict(nn100, newdata=s100.test, type='class')
table(activity.hat, s$activity[s$set=='test']) -> test100.nn
sum(diag(test100.nn))/sum(test100.nn)
test100.nn
